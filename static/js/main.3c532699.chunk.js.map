{"version":3,"sources":["happy_patrick.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","theme","global","colors","brand","heavy","font","family","size","height","headerStyle","fontSize","color","fontFamily","AppBar","props","react_default","a","createElement","Box","Object","assign","tag","direction","align","justify","pad","left","right","vertical","style","zIndex","App","state","showSidebar","_this2","this","Grommet","full","ResponsiveContext","Consumer","fill","App_AppBar","Heading","level","margin","class","Button","icon","Notification","onClick","setState","prevState","flex","overflow","horizontal","src","patrick","alt","Layer","background","FormClose","Collapsible","open","width","elevation","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c532699.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/happy_patrick.fde3bf9e.jpg\";","import React, { Component } from 'react';\nimport { Box, Button, Collapsible, Heading, Grommet, Layer, ResponsiveContext } from 'grommet';\nimport { FormClose, Notification } from 'grommet-icons';\n\nimport patrick from './happy_patrick.jpg';\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#DFA9DA',\n      heavy: '#000000',\n    },\n    font: {\n      family: 'Roboto',\n      size: '14px',\n      height: '20px',\n    },\n  },\n};\n\nconst headerStyle = {\n  fontSize: '36px',\n  color: '#000000',\n  fontFamily: 'Permanent Marker'\n}\n\nconst AppBar = (props) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n    // elevation='small'\n    style={{ zIndex: '1' }}\n    {...props}\n  />\n);\n\nclass App extends Component {\n  state = {\n    showSidebar: false,\n  }\n\n  render() {\n    const { showSidebar } = this.state;\n    return (\n      <Grommet theme={theme} full>\n        <ResponsiveContext.Consumer>\n          {size => (\n            <Box fill>\n              <AppBar>\n                <Heading level='3' margin='none' color='heavy' style={headerStyle}>\n                  Hyunsung Cho&nbsp;\n                  <i class=\"fas fa-heart\" color='brand'></i>&nbsp;\n                  <i class=\"fas fa-mobile-alt\"></i>&nbsp;\n                  <i class=\"far fa-comments\"></i>&nbsp;\n                  <i class=\"far fa-user\"></i>\n                </Heading>\n                <Button\n                  icon={<Notification />}\n                  onClick={() => this.setState(prevState => ({ showSidebar: !prevState.showSidebar }))}\n                />\n              </AppBar>\n              <Box direction='row' flex overflow={{ horizontal: 'hidden' }}>\n                <Box flex align='center' justify='center'>\n                  <img src={patrick} alt=\"Logo\" />;\n                </Box>\n                {(!showSidebar || size !== 'small') ? (\n                  <Collapsible direction=\"horizontal\" open={showSidebar}>\n                    <Box\n                      flex\n                      width='medium'\n                      background='light-2'\n                      elevation=\"small\"\n                      align=\"center\"\n                      justify=\"center\"\n                    >\n                      sidebar\n                    </Box>\n                  </Collapsible>\n                ): (\n                  <Layer>\n                    <Box\n                      background=\"light-2\"\n                      tag=\"header\"\n                      justify=\"end\"\n                      align=\"center\"\n                      direction=\"row\"\n                    >\n                      <Button\n                        icon={<FormClose />}\n                        onClick={() => this.setState({ showSidebar: false})}\n                      />\n                    </Box>\n                    <Box\n                      fill\n                      background=\"light-2\"\n                      align=\"center\"\n                      justify=\"center\"\n                    >\n                      sidebar\n                    </Box>\n                  </Layer>\n                )}\n              </Box>\n            </Box>\n          )}\n        </ResponsiveContext.Consumer>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}